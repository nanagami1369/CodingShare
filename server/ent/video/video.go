// Code generated by entc, DO NOT EDIT.

package video

import (
	"time"
)

const (
	// Label holds the string label denoting the video type in the database.
	Label = "video"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldLanguageTag holds the string denoting the language_tag field in the database.
	FieldLanguageTag = "language_tag"
	// FieldUploadTime holds the string denoting the upload_time field in the database.
	FieldUploadTime = "upload_time"
	// FieldRecordingTime holds the string denoting the recording_time field in the database.
	FieldRecordingTime = "recording_time"
	// FieldCodingSequence holds the string denoting the coding_sequence field in the database.
	FieldCodingSequence = "coding_sequence"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the video in the database.
	Table = "videos"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "videos"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "video_user"
)

// Columns holds all SQL columns for video fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldLanguageTag,
	FieldUploadTime,
	FieldRecordingTime,
	FieldCodingSequence,
	FieldComment,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "videos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"video_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultUploadTime holds the default value on creation for the "upload_time" field.
	DefaultUploadTime func() time.Time
	// RecordingTimeValidator is a validator for the "recording_time" field. It is called by the builders before save.
	RecordingTimeValidator func(int) error
)
